/* TRIGGERS SQLSERVER */


CREATE TABLE PRODUTOS(
	IDPRODUTO INT INDENTITY PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC(10,2) NOT NULL
)
GO

CREATE TABLE HISTORICO(
	IDOPERACAO INT INDENTITY PRIMARY KEY,
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECOANTIGO NUMERIC(10,2) NOT NULL,
	PRECONOVO NUMERIC(10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(30),
	MENSAGEM VARCHAR(100)
)
GO

INSERT INTO PRODUTOS VALUES('LIVRO SQL SERVER', 'LIVROS', 98.00)
INSERT INTO PRODUTOS VALUES('LIVRO ORACLE', 'LIVROS', 50.00)
INSERT INTO PRODUTOS VALUES('LICENÃ‡A POWERCENTER', 'SOFTWARES', 45000.00)
INSERT INTO PRODUTOS VALUES('NOTBOOK I7', 'COMPUTERS', 3150.00)
INSERT INTO PRODUTOS VALUES('LIVRO BUSINESS INTELIGENCE', 'LIVROS', 100.00)

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO
GO

/* VERIFICANDO O USUARIO */
SELECT SUER_NAME()
GO

/* TRIGGER DE DADOS - DATA MANIPULATION LANGUAGE*/
-- AUDITANDO TABELAS
CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE
AS
	DECLARE @IDOPERACAO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECOANTIGO NUMERIC(10, 2)
	DECLARE @PRECONOVO NUMERIC(10, 2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @ACAO VARCHAR(100)


/*
	VALORES VINDOS DE TABELAS SAO INSERIDOS COM O COMANDO SELECT



	VALORES VINDOS DE FUNCOES OU VALORES LITERAIS DEVEM SER ATRIBUIDOS COM O COMANDO "SET"
*/


--PRIMNEIRO BLOCO
SELECT @IDPRODUTO = IDPRODUTO FROM INSERTED
SELECT @PRODUTO = NOME FROM INSERTED
SELECT @CATEGORIA = CATEGORIA FROM INSERTED
SELECT @PRECO = PRECOANTIGO FROM DELETED
SELECT @PRECONOVO = PRECONOVO FROM INSERTED

-- SEGUNDO BLOCO
SET @DATA = GETDATE()
SET @USUARIO = USER_NAME()
SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

INSERT INTO HISTORICO VALUES(@PRODUTO, @CATEGORIA, @PRECOANTIGO, @PRECONOVO, @DATA, @USUARIO, @ACAO)

PRINT 'TRIGGER EXECUTADA COM SUCESSO'
GO

/* EXECUTANDO UM UPDATE */

UPDATE PRODUTOS SET PRECO = 100.00
WHERE IDPRODUTO = 100
GO

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO

/* ############################# PROGRAMANDO TRIGGER EM APENAS UMA COLUNA  ############################*/

DRROP TRIGGER TRG_ATUALIZA_PRECO

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE AS

IF UPDATE(PRECO)
BEGIN


	DECLARE @IDOPERACAO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECOANTIGO NUMERIC(10, 2)
	DECLARE @PRECONOVO NUMERIC(10, 2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @ACAO VARCHAR(100)

--PRIMNEIRO BLOCO
SELECT @IDPRODUTO = IDPRODUTO FROM INSERTED
SELECT @PRODUTO = NOME FROM INSERTED
SELECT @CATEGORIA = CATEGORIA FROM INSERTED
SELECT @PRECO = PRECOANTIGO FROM DELETED
SELECT @PRECONOVO = PRECONOVO FROM INSERTED

-- SEGUNDO BLOCO
SET @DATA = GETDATE()
SET @USUARIO = USER_NAME()
SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

INSERT INTO HISTORICO VALUES(@PRODUTO, @CATEGORIA, @PRECOANTIGO, @PRECONOVO, @DATA, @USUARIO, @ACAO)

PRINT 'TRIGGER EXECUTADA COM SUCESSO'
END
GO


UPDATE PRODUTOS SET PRECO = 300.00
WHERE IDPRODUTO = 2
GO

UPDATE PRODUTOS SET NOME = 'LIVRO JAVA' 
WHERE IDPRODUTO = 2
GO

/* VARIAVEIS COM SELECT ( ATRIBUINDO SELECTS A VARIAVEIS ) - ANONIMO*/
-- AS TRIGGERS, FUNCOES E PROCEDURES SAO ARMAZENADAS NO BANCO NAS SUAS RESPECTIVAS TABELAS
-- MAS USAR UM BLOCO SEM NOMEAR (DE FORMA ESTRUTURADA ELE FICA ENONIMO, LOGO NAO SER PERSISTIDO NA TABELA)

/* TRIGGER UPDATE */

CREATE TABLE EMPREGADO(
	IDEMP INT PRIMARY KEY,
	NOME VARCHAR(30),
	SALARIO MONEY,
	IDGERENTE INT
)
GO

ALTER TABLE EMPREGADO ADD CONSTRAINT FK_GERENTE
FOREIGN KEY(IDGERENTE) REFERENCES EMPREGADO(IDEMP)
GO

INSERT INTO EMPREGADO VALUES(1, 'CLARA', 5000.00, NULL)
INSERT INTO EMPREGADO VALUES(2, 'CELIA', 4000.00, 1)
INSERT INTO EMPREGADO VALUES(3, 'JOAO', 5000.00, 1)

CREATE TABLE HISTORICO_SALARIO(
	IDEMPREGADO INT,
	ANTIGOSAL MONEY,
	NOVOSAL MONEY,
	DATA DATETIME
)
GO

--TRIGGER
CREATE TRIGGER TG_SALARIO
ON DBO.EMPREGADO
FOR UPDATE AS 
IF UPDATE(SALARIO)
BEGIN
	INSERT INTO HISTORICO_SALARIO 
	SELECT DELETED.IDTEMP,
		   DELETED.SALARIO,
		   INSERT.SALARIO,
		   GETDATE()
 	FROM DELETED, INSERTED
 	WHERE DELETED.IDTEMP = INSERTED.IDTEMP
END
GO

UPDATE EMPREGADO SET SALARIO = SALARIO * 1.1
GO

/* SALARIO ANTIGO, NOVO, DATA E NOME DO EMPREGADO */

CREATE TABLE SALARIO_RANGE(
	MINSAL MONEY,
	MAXSAL MONEY
)
GO

INSERT INTO SALARIO_RANGE VALUES(3000.00, 6000.00)
GO 

CREATE TRIGGER TG_RANGE
ON DBO.EMPREGADO
FOR INSERT, UPDATE
AS 
	DECLARE 
		@MINSAL MONEY,
		@MAXSAL MONEY,
		@ATUALSAL MONEY

	SELECT @MINSAL = MINSAL, @MAXSAL = MAXSAL FROM SALARIO_RANGE

	SELECT @ATUALSAL = INSERTED.SALARIO
	FROM INSERTED

	IF (@ATUALSAL < @MINSAL)
	BEGIN
		-- TRATANDO ERROS NO SQL SERVER
		RAISERROR('SALARIO MENOR QUE O PISO',16,1)
		ROLLBACK TRANSACTION
	END

	IF (@ATUALSAL > @MAXSAL)
	BEGIN
		-- TRATANDO ERROS NO SQL SERVER
		RAISERROR('SALARIO MAIOR QUE O PISO',16,1)
		ROLLBACK TRANSACTION
	END
GO

UPADATE EMPREGADO SET SALARIO = 9000.00
WHERE IDEMP = 1
GO
UPADATE EMPREGADO SET SALARIO = 1000.00
WHERE IDEMP = 1
GO

/* VERIFICANDO O TEXTO DE UMA TRIGGER */