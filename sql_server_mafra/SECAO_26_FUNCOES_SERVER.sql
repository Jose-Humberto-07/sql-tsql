/*CONECTANDO AO BANCO*/

USE EMPRESA
GO


CREATE TABLE ALUNO(
	IDALUNO INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	NASCIMENTO DATE NOT NULL,
	EMAIL VARCHAR(30) UNIQUE
)


/*############################CONSTRAINTS############################*/


/*COLUNA SEXO ALTERA DA POR UMA CONSTRAINT NO LUGAR ENUM NO MYSQL*/	
ALTER TABLE ALUNO(
	ADD CONSTRAINT CK_SEXO CHECK(SEXO IN('M','F'))
)
GO

/* ESTABELECENDO O RELACIONAMENTO DE 1 X 1 DENTRO DA TABELA*/

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY IDENTITY(100, 10),
	BAIRRO VARCHAR(30),
	UF CHAR(2) NOT NULL
	CHECK (UF IN('RJ','SP','MG')),
	ID_ALUNO INT UNIQUE, 
)
GO

/*CRIANDO A FK (FOREN KEY)*/

ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY(ID_ALUNO) REFERENCES ALUNO(IDALUNO)
GO

/*COMANDOS DE DESCRIÇÃO*/

/*PROCEDURES - JA CRIADAS E ARMAZENADAS NO SISTEMA*/

SP_COLUMNS ALUNO
GO

SP_HELP ALUNO
GO

/*INSERINDO DADOS*/

INSERT INTO ALUNO VALUES('ANDRE','m','1981/12/09','ANDRE@IG.COM')
INSERT INTO ALUNO VALUES('ANA','F','1978/03/09','ANAA@IG.COM')
INSERT INTO ALUNO VALUES('RUI','M','1951/07/09','RUI@IG.COM')
INSERT INTO ALUNO VALUES('JOAO','M','2002/11/09','JOAO@IG.COM')
GO


/*ENDERECO*/

INSERT INTO ENDERECO VALUES('FLAMENGO','RJ',1)
INSERT INTO ENDERECO VALUES('FLAMENGO','RJ',1)
INSERT INTO ENDERECO VALUES('FLAMENGO','RJ',1)
INSERT INTO ENDERECO VALUES('FLAMENGO','RJ',1)
GO

/*CRIANDO A TABELA TELEFONES RELACIONAMENTO 1 X N*/

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY IDENTITY,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_ALUNO INT,
	CHECK (TIPO IN ('RES', 'COM', 'CEL'))	
)
GO

/*INSERINDO TELEFONE*/

INSERT INTO TELEFONE VALUES('CEL', '789999899'1)
INSERT INTO TELEFONE VALUES('CEL', '456444444'1)
INSERT INTO TELEFONE VALUES('CEL', '564555555'1)
INSERT INTO TELEFONE VALUES('CEL', '234522222'1)
GO

SELECT * FROM ALUNO 
GO


/*PEGAR DATA ATUAL*/
SELECT GETDATE()
GO

/*CLÁUSULA AMBÍGUA => QUANDO EU FAÇO UM JOIN E TEM COLUNAS REPETIDAS NA MESMA TABELA OU NA MESMA CONSULTA (SAIDA: DAR APELIDOS ÀS COLUNAS E/OU ÀS TABELAS)*/
SELECT ALUNO.NOME AS 'ALUNO_NOME',
	   ALUNO.SEXO AS 'SEXO',
	   ALUNO.DATANASCIMENTO AS 'NASCIMENTO',
	   ALUNO.EMAIL AS 'EMIAL',
	   ISNULL(TELEFONE.NUMERO, '#############') AS 'ALUNO_TEFONE',
	   ISNULL(TELEFONE.TIPO, '###############') AS TIPO, 
	   ENDERECO.BAIRRO AS 'ALUNO_BAIRRO',
	   ENDERECO.UF AS 'ALUNO_UF'
FROM ALUNO 
		INNER JOIN TELEFONE (NO LOCK)
		ON ALUNO.IDALUNO = TELEFONE.ID_ALUNO
		INNER JOIN ENDERECO (NO LOCK)
		ON ALUNO.IDALUNO = ENDERECO.ID_ALUNO
WHERE ENDERECO.UF = 'RJ'
GO

/* ############################ DATAS ############################*/

SELECT ALUNO.NOME AS NOME,
	   ALUNO.DATANASCIMENTO AS NASCIMENTO
FROM ALUNO
GO

SELECT ALUNO.NOME AS NOME,
	   ALUNO.DATANASCIMENTO AS NASCIMENTO,
	   GETDATE() AS 'DIA_HORA'
FROM ALUNO
GO

SELECT ALUNO.NOME AS NOME,
	   ALUNO.DATANASCIMENTO AS NASCIMENTO
	   DATEDIFF(DAY, DATANASCIMENTO, GETDATE()) AS 'IDADE'
FROM ALUNO
GO

SELECT ALUNO.NOME AS NOME,
	   ALUNO.DATANASCIMENTO AS NASCIMENTO
	   DATEDIFF((DAY, DATANASCIMENTO, GETDATE())/365) AS 'IDADE'
FROM ALUNO
GO

SELECT ALUNO.NOME AS NOME,
	   ALUNO.DATANASCIMENTO AS NASCIMENTO
	   DATEDIFF((MONTH, DATANASCIMENTO, GETDATE())/12) AS 'IDADE'
FROM ALUNO
GO

SELECT ALUNO.NOME AS NOME,
	   ALUNO.DATANASCIMENTO AS NASCIMENTO
	   DATEDIFF(YEAH, DATANASCIMENTO, GETDATE()) AS 'IDADE'
FROM ALUNO
GO

SELECT NOME, DATENAME(MONTH, NASCIMENTO) AS 'NOME_MES_NASCIMENTO'
FROM ALUNO
GO

SELECT NOME, DATENAME(YEAH, NASCIMENTO) AS 'ANO_NASCIMENTO'
FROM ALUNO
GO

SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO) AS 'NOME_SEMANA_NASCIMENTO'
FROM ALUNO
GO

SELECT NOME, DATENAME(MONTH, NASCIMENTO) AS 'NOME_MES_NASCIMENTO',
	   DATEPARTE(MONTH, NASCIMENTO) AS 'NUMERO_MES_NASCIMENTO'
FROM ALUNO
GO

/* DATEADD - RETORNA UMA DATA SOMANDO A OUTRA DATA*/

SELECT DETAADD(DAY, 365, GETDATE()) AS 'SOMA_DATAS'
SELECT DETAADD(YEAF, 10, GETDATE()) AS 'SOMA_ANOS'


/* ############################ CONSVERSÃO DE TIPOS ############################*/

SELECT CAST('1' AS INT) + CAST('1' AS INT)

SELECT NOME,
	   NASCIMENTO
FROM ALUNO
GO

SELECT NOME,
	   DAY(NASCIMENTO) + '/' + MONTH(NASCIMENTO) + '/' + YEAH(NASCIMENTO)
FROM ALUNO
GO

/*CONVERTER DATA PARA STRING E/ OU PARA PT-BR*/

SELECT NOME
	   CAST(DAY(NASCIMENTO) AS VARCHAR) + '/' + CAST(MONTH(NASCIMENTO) AS VARCHAR) + '/' + CAST(YEAH(NASCIMENTO) AS VARCHAR) AS 'DATA_NASCIMENTO'
FROM ALUNO
GO


/*CHARINDEX - RETORNA UM INTEIRO (TRÁS O INDICE ONDE A LETRA FOR ENCONTRADA NA PALAVRA*/

SELECT NOME, CHARINDEX('A', NOME) AS INDICE
FROM ALUNO
GO

SELECT NOME, CHARINDEX('A', NOME, 2) AS INDICE
FROM
GO
-- JOAO <- LETRA 'A' ENCONTRADA NO INCE 3

/*BULK INSERT - IMPORTAÇÃO DE ARQUIVOS*/
-- OS ATRIBUTOS CRIDOS NA TABELA VÃO SER IGUAIS AS COLUNAS DO ARQUIVO IMPORTADO
CREATE TABLE LANCAMENTO_CONTABIL(
	CONTA INT,
	VALOR INT,
	DEB_CRED CHAR(1)
)
GO

SELECT * FROM LANCAMENTO_CONTABIL
GO

/* \T = TAB*/

BULK INSERT LANCAMENTO_CONTABIL
FROM 'C:\ ARQUIVOS\ CONTAS.TXT'
WITH
(
	FIRSTROW = 2,
	DATAFILETYPE = 'char',
	FIELDTERMINATOR = '\t',
	ROWTERMINATOR = '\n'
)

SELECT * FROM LANCAMENTO_CONTABIL
GO

/* DESAFIO DO SALDO 
QUERY QUE TRAGA O MENOR NUMERO DA CONTA
SALDO - DEVEDOR OU CREDOR */

SELECT CONTA, VALOR, DEB_CRED,
CHARINDEX('D', DEB_CRED) AS DEBITO, --SE ACHAR VAI RETORNAR TRUE SENAO FALSE
CHARINDEX('C', DEB_CRED) AS CREDITO, --SE ACHAR VAI RETORNAR TRUE SENAO FALSE
CHARINDEX('C') * 2 - 1 AS MULTIPLICADOR
FROM LANCAMENTO_CONTABIL
GO

SELECT CONTA,
SUM(VALOR * (CHARINDEX('C', DEB_CRED) * 2 - 1)) AS SALDO
GROUP BY CONTA 
GO